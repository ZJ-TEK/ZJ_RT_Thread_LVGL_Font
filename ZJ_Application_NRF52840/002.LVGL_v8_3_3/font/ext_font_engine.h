/**
 * This file is generated by py_FontMaker generation tools
 * Please DO NOT modify this file
 *
 * author: John
 * github: https://github.com/ZJ-TEK/Py_FontMaker_Beta.git
 */
#ifndef _EXT_FONT_ENGINE_H_
#define _EXT_FONT_ENGINE_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "Font_Lib.h"
#include "ext_font_app.h"

#if (BITMAP_RLE_ENCODE_ENABLE == 1 && BITMAP_RLE_ENCODE_BUFFER_USE_MALLOC == 0)
extern uint8_t glyph_bitmap_buf[2][MAX_STATIC_BITMAP_BUF_SIZE];    // !!! Using RLE will use more memory
#else
extern uint8_t glyph_bitmap_buf[MAX_STATIC_BITMAP_BUF_SIZE];       // !!! Note memory security
#endif

typedef uint32_t (*pfunc_get_data)(uint32_t offset, uint8_t *p_buf, uint32_t size);

extern int ext_font_create(FONT_TYPE font_type, public_font_t *p_Font, const font_type_info_t *p_font_info, pfunc_get_data p_get_data_func);
extern void ext_font_delete(public_font_t **p_font);

#if CMAP_HASH_ENABLE
extern int hash_unicode_get_index(const cmap_sparse_table_t *p_cmap_hash_table, uint16_t cmap_size, uint32_t unicode);
#else
extern int binary_method_search(const cmap_sparse_table_t *cmap_table, uint16_t cmap_size, uint32_t unicode);
#endif

#if BITMAP_RLE_ENCODE_ENABLE
extern int RLE_glyph_bitmap_decode(uint8_t *inbuf,uint16_t in_size, uint8_t *outbuf,uint16_t out_size);
#endif

#ifdef __cplusplus
}
#endif

#endif


